colours = c("blue", "white", "red"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("blue", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("blue", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "SIR")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("blue", "white", "red"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "SIR")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("blue", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "SIR")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("blue", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "blue")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "SIR")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
ggplot() +
geom_sf(data = test2, aes(fill = SIR)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "SIR")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = population)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 1.1, marginal = marg)})
mapview(map, zcol = "exc")
mapview(test2, zcol = "exc")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 1, marginal = marg)})
mapview(test2, zcol = "exc")
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
ggplot() +
geom_sf(data = test2, aes(fill = hp)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Population")
ggplot() +
geom_sf(data = test2, aes(fill = hp)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "House Price")
ggplot() +
geom_sf(data = test2, aes(fill = hp)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "House Price")
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 0.9, marginal = marg)})
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 0.8, marginal = marg)})
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 1, marginal = marg)})
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
mapview(brn_mkm_sch_sf, zcol="population")
# Option 2: simulate by guess (judging by surrounding & population)
test2 <- brn_mkm_sch_sf
quantile(hp$price, 0.05, na.rm = TRUE)
test2 <- test2 %>%
mutate(hp = case_when(
mukim == "Mukim Kuala Balai" ~ 100000,
mukim == "Mukim Bukit Sawat" ~ 170000,
mukim == "Mukim Ukong" ~ 180000,
mukim == "Mukim Sukang" ~ 100000,
mukim == "Mukim Melilas" ~ 100000,
mukim == "Mukim Bokok" ~ 200000,
mukim == "Mukim Labu" ~ 220000,
mukim == "Mukim Tamoi" ~ 250000,
mukim == "Mukim Sungai Kedayan" ~ 250000,
mukim == "Mukim Burong Pingai Ayer" ~ 250000,
mukim == "Mukim Peramu" ~ 250000,
mukim == "Mukim Saba" ~ 250000,
TRUE ~ hp
))
test2$area <- as.numeric(st_area(test2))
test2$Y <- test2$schools
test2$E <- sum(test2$schools)/sum(test2$population) * test2$population
test2$SIR <- test2$Y/test2$E
nb <- poly2nb(test2)
nb2INLA("map.adj", nb)
g <- inla.read.graph(filename = "map.adj")
test2$re_u <- 1:nrow(test2)
test2 <- test2 %>%
mutate(
pop_s = population / 1000,   # per 1000 people
area_s = as.numeric(area) / 1000000,  # e.g., km^2 instead of m^2
hp_s = hp / 1000              # per 1000 currency units
)
formula <- Y ~ pop_s + area_s + hp_s + f(re_u, model = "bym2", graph = g)
res <- inla(formula, family = "poisson", data = test2, E=E,
control.predictor = list(compute = TRUE),
control.compute = list(return.marginals.predictor = TRUE))
test2$RA <- res$summary.fitted.values[, "mean"]
ggplot() +
geom_sf(data = test2, aes(fill = RA)) +
theme_bw() +
scale_fill_gradientn(
colours = c("red", "white", "grey"),   # multiple colors
limits = c(0,3),
breaks = c(0,1,2,3),
labels = c("0","1","2","3")
) +
labs(fill = "Relative Abundance")
test2$exc <- sapply(res$marginals.fitted.values,
FUN = function(marg){inla.pmarginal(q = 1, marginal = marg)})
ggplot() +
geom_sf(data = test2, aes(fill = exc)) +
theme_bw() +
scale_fill_gradientn(
colours = c("grey", "white", "red")   # multiple colors
# limits = c(0,3),
# breaks = c(0,1,2,3),
# labels = c("0","1","2","3")
) +
labs(fill = "Exceedance Probability RA < 1 ")
# 0. EDA ------------------------------------------------------------------
nborneo_sch_sf <- nborneo_sch_sf %>% mutate(area = as.numeric(st_area(geometry)))
nborneo_sch_sf <- nborneo_sch_sf %>% mutate(sch_pop = schools/population,
sch_area = schools/area)
# sch
m1 <- mapview(nborneo_sch_sf, zcol="schools")
# sch:pop
m2 <- mapview(nborneo_sch_sf, zcol="sch_pop")
#sch:area
m3 <- mapview(nborneo_sch_sf, zcol="sch_area")
#scale:
leafsync::sync(m1, m2, m3)
# student teacher ratio
brn_tchr <- bruneimap::tchr %>%
mutate(teachers = as.numeric(M) + as.numeric(`F`),
district = District,
stage = case_when(
`Education Level` == "Primary" ~ "primary",
`Education Level` == "Secondary" ~ "secondary",
TRUE ~ `Education Level`)) %>%
filter(Sector == "MOE",
stage %in% c("primary", "secondary")) %>%
select(district, stage, teachers)
brn_enrolment <- bruneimap::enrolment %>%
mutate(students = as.numeric(M) + as.numeric(`F`),
district = District,
stage = case_when(
`Education Level` == "Primary" ~ "primary",
`Education Level` == "Secondary" ~ "secondary",
TRUE ~ `Education Level`)) %>%
filter(Sector == "MOE",
stage %in% c("primary", "secondary")) %>%
select(district, stage, students)
mys_tchr <- read_csv("source/mys_teacher.csv")
mys_enrolment <- read_csv("source/mys_enrolment.csv")
east_mys_tchr <- mys_tchr %>%
filter(state %in% c("Sarawak", "Sabah"),
stage %in% c("primary", "secondary"),
district != "All Districts",
sex == "both",
date == "2018-01-01") %>%
select(-sex, -date, -state) %>%
mutate(district = case_when(
district == "Telupid" ~ "Beluran",
district == "Kalabakan" ~ "Tawau",
district == "Maradong" ~ "Meradong",
district == "Kabong" ~ "Saratok",
district == "Pusa" ~ "Saratok",
district == "Sebauh" ~ "Bintulu",
district == "Subis" ~ "Miri",
district == "Beluru" ~ "Miri",
district == "Bukit Mabong" ~ "Kapit",
# district == "Matu" ~ "Mukah",
# district == "Pakan" ~ "Sarikei",
# district == "Selangau" ~ "Sibu",
district == "Tanjung Manis" ~ "Mukah",
district == "Tebedu" ~ "Serian",
district == "Telang Usan" ~ "Miri",
TRUE ~ district
)) %>%
group_by(district, stage) %>%
summarise(teachers = sum(teachers, na.rm = TRUE))
east_mys_enrolment <- mys_enrolment %>%
filter(state %in% c("Sarawak", "Sabah"),
stage %in% c("primary", "secondary"),
district != "All Districts",
sex == "both",
date == "2018-01-01") %>%
select(-sex, -date, -state) %>%
mutate(district = case_when(
district == "Telupid" ~ "Beluran",
district == "Kalabakan" ~ "Tawau",
district == "Maradong" ~ "Meradong",
district == "Kabong" ~ "Saratok",
district == "Pusa" ~ "Saratok",
district == "Sebauh" ~ "Bintulu",
district == "Subis" ~ "Miri",
district == "Beluru" ~ "Miri",
district == "Bukit Mabong" ~ "Kapit",
# district == "Matu" ~ "Mukah",
# district == "Pakan" ~ "Sarikei",
# district == "Selangau" ~ "Sibu",
district == "Tanjung Manis" ~ "Mukah",
district == "Tebedu" ~ "Serian",
district == "Telang Usan" ~ "Miri",
TRUE ~ district
)) %>%
group_by(district, stage) %>%
summarise(students = sum(students, na.rm = TRUE))
brn_std_tchr <- left_join(brn_enrolment, brn_tchr, by=c("district"="district", "stage"="stage"))
brn_std_tchr_sf <- brn_std_tchr %>%
mutate(district = case_when(
district == "Brunei Muara" ~ "Brunei-Muara",
TRUE ~ district
)) %>%
left_join(., dis_sf, by="district") %>%
select(-id, -X, -Y, -perimeter, -area)
east_mys_std_tchr <- left_join(east_mys_enrolment, east_mys_tchr, by=c("district"="district", "stage"="stage"))
east_mys_std_tchr_sf <- east_mys_std_tchr %>%
left_join(., east_mys_dis_sf, by="district") %>%
select(-state)
nborneo_std_tchr_sf <- rbind(brn_std_tchr_sf, east_mys_std_tchr_sf)
nborneo_std_tchr_sf <- nborneo_std_tchr_sf %>%
mutate(std_tcr=students/teachers)
std_tcr_primary <- nborneo_std_tchr_sf %>%  filter(stage == "primary") %>%  st_as_sf()
std_tcr_secondary <- nborneo_std_tchr_sf %>%  filter(stage == "secondary") %>%  st_as_sf()
mapview(std_tcr_primary, zcol="std_tcr")
library(leaflet.extras2)
library(RColorBrewer)
library(leaflet)
pal <- colorRampPalette(brewer.pal(9, "YlOrRd"))
at <- seq(min(std_tcr_primary$std_tcr), max(std_tcr_primary$std_tcr), length.out = 4)
mapview(std_tcr_primary, zcol="std_tcr", col.regions = pal, at = at)
at <- seq(min(std_tcr_primary$std_tcr), max(std_tcr_primary$std_tcr), length.out = 5)
mapview(std_tcr_primary, zcol="std_tcr", col.regions = pal, at = at)
mapview(std_tcr_secondary, zcol="std_tcr", col.regions = pal, at = at)
mapview(std_tcr_primary, zcol="std_tcr", col.regions = pal, at = at)
mapview(std_tcr_secondary, zcol="std_tcr", col.regions = pal, at = at)
at <- seq(min(std_tcr_secondary$std_tcr), max(std_tcr_sescondary$std_tcr), length.out = 5)
at <- seq(min(std_tcr_secondary$std_tcr), max(std_tcr_secondary$std_tcr), length.out = 5)
at <- seq(min(std_tcr_secondary$std_tcr), max(std_tcr_secondary$std_tcr), length.out = 5)
std_tcr_secondary$std_tcr
view(std_tcr_secondary)
view(nborneo_sch_sf)
at <- seq(min(std_tcr_primary$std_tcr), max(std_tcr_primary$std_tcr), length.out = 5)
mapview(std_tcr_primary, zcol="std_tcr", col.regions = pal, at = at)
#scale:
leafsync::sync(m1, m2, m3)
m1 <- mapview(test, zcol="PMoriginal")
m2 <- mapview(test, zcol="hp")
leafsync::sync(m1, m2)
test2
